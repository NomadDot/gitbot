import os
import logging


from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import aiohttp

import keyboard as kb
import plans_budget as wr

API_TOKEN = '1585015132:AAE9NvQ6p94wRi5I9-oj5mC-v26fVXgku2Y' #–¢–æ–∫–µ–Ω –¥—Ä—É–≥–æ–≥–æ –±–æ—Ç–∞'1580722050:AAHOzn6zOD8t8IS5_a1NxvgxN7pKIPUJl7Y'

# –õ–æ–≥
logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ 
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

class Form(StatesGroup):
    plan_msg = State() 


#################################################################

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤—ñ—Ç!üëã\n"
        "–ë–æ—Ç –ü–ª–∞–Ω–µ—Ä/–§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:\n"  
        "1)–ü–ª–∞–Ω–∏\n"
        "2)–í–∏—Ç—Ä–∞—Ç–∏\n", reply_markup=kb.menu_kb)

@dp.message_handler(commands=['love'])
async def send_love(message: types.Message):
    await message.reply("–†–æ–º–∞–Ω –¥—É—Ä–Ω–∏–π –ª—é–±–∏—Ç –ù–∞—Ç–∞—à–∫—É", reply=False)

#if-else –º–µ–Ω—é, –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
@dp.message_handler(content_types=['text'])
async def mes(message: types.Message):
    get_message_bot = message.text
    if(get_message_bot == '–ü–ª–∞–Ω–∏üìù'):
        await message.answer("–î—ñ—è:\n1)–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏\n2)–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–ª–∞–Ω–∏", reply_markup=kb.plans_kb)   
    elif(get_message_bot == "–í–∏—Ç—Ä–∞—Ç–∏"):
        await message.reply("–î—ñ—è:\n1)–î–æ–¥–∞—Ç–∏\n2)–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ", reply=False)
    elif(get_message_bot == "–ú–µ–Ω—éüçª"):
        await send_welcome(message)
    elif(get_message_bot == "–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏"):
        await create_plans(message)
    elif(get_message_bot == "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–ª–∞–Ω–∏"):
        await show_plans(message)
    else:
        await message.reply("–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É!", reply=False)
##################################################################
    
@dp.message_handler(commands=['show_p'])
async def show_plans(message: types.Message):
    string = wr.show_plans()
    await message.reply(string, reply_markup=kb.justMenu_kb)


@dp.message_handler( commands=['create_p'])
async def create_plans(message: types.Message):
    await Form.plan_msg.set()
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—ñ —Å–ø—Ä–∞–≤–∏ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ —á–µ—Ä–µ–∑ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫\n\n–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n–ü–æ–ø—Ä–∏–±–∏—Ä–∞—Ç–∏ –≤ –∫—ñ–º–Ω–∞—Ç—ñ\n–ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ –µ–∫–∑–∞–º–µ–Ω—É', reply_markup=types.ReplyKeyboardRemove())
    

@dp.message_handler(state=Form.plan_msg)
async def process_plan(message: types.Message, state: FSMContext):
    async with state.proxy() as data:

        data = message.text 
        await Form.next()
        wr.create_plans(data)
        await message.reply('–ß—É–¥–æ–≤–æ!')
        
        await send_welcome(message)


@dp.message_handler(commands=['plans']) #–∫–æ–º–∞–Ω–¥–∞ "–ø–ª–∞–Ω–∏", —á–µ—Ä–µ–∑ —è–∫—É –º–∏ –±–∞—á–∏–º–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –±–æ—Ç–∞ –≤ –ø–ª–∞–Ω–∞—Ö
async def make_plans(message: types.Message):
    await message.answer("–î—ñ—è:\n1)–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ - /create_p\n2)–ü–ª–∞–Ω–∏ - /show_p")


#@dp.message_handler(commands=['1']) 
#async def smake_plans(message: types.Message):
#    await message.reply("–ü–ª–∞–Ω–∏", reply_markup=kb.menu_kb)

#@dp.callback_query_handler(lambda  c: c.data == 'plans1')
#async def process_callback_plans(callback_querry: types.CallbackQuery):
#    await bot.answer_callback_query(callback_querry.id)
#    await bot.send_message(callback_querry.from_user.id, '–ù–∞–∂–∞—Ç–∞ –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞!')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)